// For LGT8F328 Nano - style

int analogueReadings[] = { -1, -1, -1, -1, -1, -1 };
int jitterThreshold = 14;

byte analoguePins[] = { A7, A6, A5, A4, A3, A2 };
byte readAnaloguePin = 0;

byte stepLedPins[] = { 5, 6, 7, 8, 9 };

byte stepCountPins[] = { 11, 10 };

// Using analogue pins means that clock and reset could be recoded for CVs
byte stepPin = A1;
bool prevStepState = false;

//byte resetPin = A0;
//bool prevResetState = false;

byte notes[] = { 0, 0, 0, 0, 0 };

float scaleRange = 0;

byte chosenScale = 0;

const uint8_t scaleNotes[16][128] PROGMEM = {
  // chromatic
  { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127 },
  // dorian
  { 0, 1, 3, 5, 7, 8, 10, 12, 13, 15, 17, 19, 20, 22, 24, 25, 27, 29, 31, 32, 34, 36, 37, 39, 41, 43, 44, 46, 48, 49, 51, 53, 55, 56, 58, 60, 61, 63, 65, 67, 68, 70, 72, 73, 75, 77, 79, 80, 82, 84, 85, 87, 89, 91, 92, 94, 96, 97, 99, 101, 103, 104, 106, 108, 109, 111, 113, 115, 116, 118, 120, 121, 123, 125, 127, 104, 106, 108, 109, 111, 113, 115, 116, 118, 120, 121, 123, 125, 127, 104, 106, 108, 109, 111, 113, 115, 116, 118, 120, 121, 123, 125, 127, 104, 106, 108, 109, 111, 113, 115, 116, 118, 120, 121, 123, 125, 127, 104, 106, 108, 109, 111, 113, 115, 116, 118, 120, 121 },
  // phrygian
  { 0, 2, 4, 6, 7, 9, 11, 12, 14, 16, 18, 19, 21, 23, 24, 26, 28, 30, 31, 33, 35, 36, 38, 40, 42, 43, 45, 47, 48, 50, 52, 54, 55, 57, 59, 60, 62, 64, 66, 67, 69, 71, 72, 74, 76, 78, 79, 81, 83, 84, 86, 88, 90, 91, 93, 95, 96, 98, 100, 102, 103, 105, 107, 108, 110, 112, 114, 115, 117, 119, 120, 122, 124, 126, 127, 105, 107, 108, 110, 112, 114, 115, 117, 119, 120, 122, 124, 126, 127, 105, 107, 108, 110, 112, 114, 115, 117, 119, 120, 122, 124, 126, 127, 105, 107, 108, 110, 112, 114, 115, 117, 119, 120, 122, 124, 126, 127, 105, 107, 108, 110, 112, 114, 115, 117, 119, 120, 122 },
  // lydian
  { 0, 2, 4, 5, 7, 9, 10, 12, 14, 16, 17, 19, 21, 22, 24, 26, 28, 29, 31, 33, 34, 36, 38, 40, 41, 43, 45, 46, 48, 50, 52, 53, 55, 57, 58, 60, 62, 64, 65, 67, 69, 70, 72, 74, 76, 77, 79, 81, 82, 84, 86, 88, 89, 91, 93, 94, 96, 98, 100, 101, 103, 105, 106, 108, 110, 112, 113, 115, 117, 118, 120, 122, 124, 125, 127, 105, 106, 108, 110, 112, 113, 115, 117, 118, 120, 122, 124, 125, 127, 105, 106, 108, 110, 112, 113, 115, 117, 118, 120, 122, 124, 125, 127, 105, 106, 108, 110, 112, 113, 115, 117, 118, 120, 122, 124, 125, 127, 105, 106, 108, 110, 112, 113, 115, 117, 118, 120, 122 },
  // mixolydian
  { 0, 2, 3, 5, 7, 8, 10, 12, 14, 15, 17, 19, 20, 22, 24, 26, 27, 29, 31, 32, 34, 36, 38, 39, 41, 43, 44, 46, 48, 50, 51, 53, 55, 56, 58, 60, 62, 63, 65, 67, 68, 70, 72, 74, 75, 77, 79, 80, 82, 84, 86, 87, 89, 91, 92, 94, 96, 98, 99, 101, 103, 104, 106, 108, 110, 111, 113, 115, 116, 118, 120, 122, 123, 125, 127, 104, 106, 108, 110, 111, 113, 115, 116, 118, 120, 122, 123, 125, 127, 104, 106, 108, 110, 111, 113, 115, 116, 118, 120, 122, 123, 125, 127, 104, 106, 108, 110, 111, 113, 115, 116, 118, 120, 122, 123, 125, 127, 104, 106, 108, 110, 111, 113, 115, 116, 118, 120, 122 },
  // aeolian
  { 0, 1, 3, 5, 6, 8, 10, 12, 13, 15, 17, 18, 20, 22, 24, 25, 27, 29, 30, 32, 34, 36, 37, 39, 41, 42, 44, 46, 48, 49, 51, 53, 54, 56, 58, 60, 61, 63, 65, 66, 68, 70, 72, 73, 75, 77, 78, 80, 82, 84, 85, 87, 89, 90, 92, 94, 96, 97, 99, 101, 102, 104, 106, 108, 109, 111, 113, 114, 116, 118, 120, 121, 123, 125, 126, 104, 106, 108, 109, 111, 113, 114, 116, 118, 120, 121, 123, 125, 126, 104, 106, 108, 109, 111, 113, 114, 116, 118, 120, 121, 123, 125, 126, 104, 106, 108, 109, 111, 113, 114, 116, 118, 120, 121, 123, 125, 126, 104, 106, 108, 109, 111, 113, 114, 116, 118, 120, 121 },
  // locrian
  { 0, 2, 4, 5, 7, 9, 11, 12, 14, 16, 17, 19, 21, 23, 24, 26, 28, 29, 31, 33, 35, 36, 38, 40, 41, 43, 45, 47, 48, 50, 52, 53, 55, 57, 59, 60, 62, 64, 65, 67, 69, 71, 72, 74, 76, 77, 79, 81, 83, 84, 86, 88, 89, 91, 93, 95, 96, 98, 100, 101, 103, 105, 107, 108, 110, 112, 113, 115, 117, 119, 120, 122, 124, 125, 127, 105, 107, 108, 110, 112, 113, 115, 117, 119, 120, 122, 124, 125, 127, 105, 107, 108, 110, 112, 113, 115, 117, 119, 120, 122, 124, 125, 127, 105, 107, 108, 110, 112, 113, 115, 117, 119, 120, 122, 124, 125, 127, 105, 107, 108, 110, 112, 113, 115, 117, 119, 120, 122 },
  // lydian_domiant
  { 0, 2, 4, 5, 7, 8, 10, 12, 14, 16, 17, 19, 20, 22, 24, 26, 28, 29, 31, 32, 34, 36, 38, 40, 41, 43, 44, 46, 48, 50, 52, 53, 55, 56, 58, 60, 62, 64, 65, 67, 68, 70, 72, 74, 76, 77, 79, 80, 82, 84, 86, 88, 89, 91, 92, 94, 96, 98, 100, 101, 103, 104, 106, 108, 110, 112, 113, 115, 116, 118, 120, 122, 124, 125, 127, 104, 106, 108, 110, 112, 113, 115, 116, 118, 120, 122, 124, 125, 127, 104, 106, 108, 110, 112, 113, 115, 116, 118, 120, 122, 124, 125, 127, 104, 106, 108, 110, 112, 113, 115, 116, 118, 120, 122, 124, 125, 127, 104, 106, 108, 110, 112, 113, 115, 116, 118, 120, 122 },
  // super_locrian
  { 0, 2, 3, 5, 7, 9, 11, 12, 14, 15, 17, 19, 21, 23, 24, 26, 27, 29, 31, 33, 35, 36, 38, 39, 41, 43, 45, 47, 48, 50, 51, 53, 55, 57, 59, 60, 62, 63, 65, 67, 69, 71, 72, 74, 75, 77, 79, 81, 83, 84, 86, 87, 89, 91, 93, 95, 96, 98, 99, 101, 103, 105, 107, 108, 110, 111, 113, 115, 117, 119, 120, 122, 123, 125, 127, 105, 107, 108, 110, 111, 113, 115, 117, 119, 120, 122, 123, 125, 127, 105, 107, 108, 110, 111, 113, 115, 117, 119, 120, 122, 123, 125, 127, 105, 107, 108, 110, 111, 113, 115, 117, 119, 120, 122, 123, 125, 127, 105, 107, 108, 110, 111, 113, 115, 117, 119, 120, 122 },
  // hirajoshi
  { 0, 1, 5, 6, 10, 12, 13, 17, 18, 22, 24, 25, 29, 30, 34, 36, 37, 41, 42, 46, 48, 49, 53, 54, 58, 60, 61, 65, 66, 70, 72, 73, 77, 78, 82, 84, 85, 89, 90, 94, 96, 97, 101, 102, 106, 108, 109, 113, 114, 118, 120, 121, 125, 126, 106, 108, 109, 113, 114, 118, 120, 121, 125, 126, 106, 108, 109, 113, 114, 118, 120, 121, 125, 126, 106, 108, 109, 113, 114, 118, 120, 121, 125, 126, 106, 108, 109, 113, 114, 118, 120, 121, 125, 126, 106, 108, 109, 113, 114, 118, 120, 121, 125, 126, 106, 108, 109, 113, 114, 118, 120, 121, 125, 126, 106, 108, 109, 113, 114, 118, 120, 121, 125, 126, 106, 108, 109, 113 },
  // minor_pentatonic
  { 0, 2, 4, 7, 9, 12, 14, 16, 19, 21, 24, 26, 28, 31, 33, 36, 38, 40, 43, 45, 48, 50, 52, 55, 57, 60, 62, 64, 67, 69, 72, 74, 76, 79, 81, 84, 86, 88, 91, 93, 96, 98, 100, 103, 105, 108, 110, 112, 115, 117, 120, 122, 124, 127, 105, 108, 110, 112, 115, 117, 120, 122, 124, 127, 105, 108, 110, 112, 115, 117, 120, 122, 124, 127, 105, 108, 110, 112, 115, 117, 120, 122, 124, 127, 105, 108, 110, 112, 115, 117, 120, 122, 124, 127, 105, 108, 110, 112, 115, 117, 120, 122, 124, 127, 105, 108, 110, 112, 115, 117, 120, 122, 124, 127, 105, 108, 110, 112, 115, 117, 120, 122, 124, 127, 105, 108, 110, 112 },
  // major_pentatonic
  { 0, 2, 5, 7, 10, 12, 14, 17, 19, 22, 24, 26, 29, 31, 34, 36, 38, 41, 43, 46, 48, 50, 53, 55, 58, 60, 62, 65, 67, 70, 72, 74, 77, 79, 82, 84, 86, 89, 91, 94, 96, 98, 101, 103, 106, 108, 110, 113, 115, 118, 120, 122, 125, 127, 106, 108, 110, 113, 115, 118, 120, 122, 125, 127, 106, 108, 110, 113, 115, 118, 120, 122, 125, 127, 106, 108, 110, 113, 115, 118, 120, 122, 125, 127, 106, 108, 110, 113, 115, 118, 120, 122, 125, 127, 106, 108, 110, 113, 115, 118, 120, 122, 125, 127, 106, 108, 110, 113, 115, 118, 120, 122, 125, 127, 106, 108, 110, 113, 115, 118, 120, 122, 125, 127, 106, 108, 110, 113 },
  // minor_blues
  { 0, 2, 3, 4, 7, 9, 12, 14, 15, 16, 19, 21, 24, 26, 27, 28, 31, 33, 36, 38, 39, 40, 43, 45, 48, 50, 51, 52, 55, 57, 60, 62, 63, 64, 67, 69, 72, 74, 75, 76, 79, 81, 84, 86, 87, 88, 91, 93, 96, 98, 99, 100, 103, 105, 108, 110, 111, 112, 115, 117, 120, 122, 123, 124, 127, 105, 108, 110, 111, 112, 115, 117, 120, 122, 123, 124, 127, 105, 108, 110, 111, 112, 115, 117, 120, 122, 123, 124, 127, 105, 108, 110, 111, 112, 115, 117, 120, 122, 123, 124, 127, 105, 108, 110, 111, 112, 115, 117, 120, 122, 123, 124, 127, 105, 108, 110, 111, 112, 115, 117, 120, 122, 123, 124, 127, 105, 108, 110 },
  // major_blues
  { 0, 1, 2, 5, 7, 10, 12, 13, 14, 17, 19, 22, 24, 25, 26, 29, 31, 34, 36, 37, 38, 41, 43, 46, 48, 49, 50, 53, 55, 58, 60, 61, 62, 65, 67, 70, 72, 73, 74, 77, 79, 82, 84, 85, 86, 89, 91, 94, 96, 97, 98, 101, 103, 106, 108, 109, 110, 113, 115, 118, 120, 121, 122, 125, 127, 106, 108, 109, 110, 113, 115, 118, 120, 121, 122, 125, 127, 106, 108, 109, 110, 113, 115, 118, 120, 121, 122, 125, 127, 106, 108, 109, 110, 113, 115, 118, 120, 121, 122, 125, 127, 106, 108, 109, 110, 113, 115, 118, 120, 121, 122, 125, 127, 106, 108, 109, 110, 113, 115, 118, 120, 121, 122, 125, 127, 106, 108, 109 },
  // whole_half_diminished
  { 0, 1, 3, 4, 6, 7, 9, 10, 12, 13, 15, 16, 18, 19, 21, 22, 24, 25, 27, 28, 30, 31, 33, 34, 36, 37, 39, 40, 42, 43, 45, 46, 48, 49, 51, 52, 54, 55, 57, 58, 60, 61, 63, 64, 66, 67, 69, 70, 72, 73, 75, 76, 78, 79, 81, 82, 84, 85, 87, 88, 90, 91, 93, 94, 96, 97, 99, 100, 102, 103, 105, 106, 108, 109, 111, 112, 114, 115, 117, 118, 120, 121, 123, 124, 126, 127, 105, 106, 108, 109, 111, 112, 114, 115, 117, 118, 120, 121, 123, 124, 126, 127, 105, 106, 108, 109, 111, 112, 114, 115, 117, 118, 120, 121, 123, 124, 126, 127, 105, 106, 108, 109, 111, 112, 114, 115, 117, 118 },
  // half_whole_diminished
  { 0, 2, 3, 5, 6, 8, 9, 11, 12, 14, 15, 17, 18, 20, 21, 23, 24, 26, 27, 29, 30, 32, 33, 35, 36, 38, 39, 41, 42, 44, 45, 47, 48, 50, 51, 53, 54, 56, 57, 59, 60, 62, 63, 65, 66, 68, 69, 71, 72, 74, 75, 77, 78, 80, 81, 83, 84, 86, 87, 89, 90, 92, 93, 95, 96, 98, 99, 101, 102, 104, 105, 107, 108, 110, 111, 113, 114, 116, 117, 119, 120, 122, 123, 125, 126, 104, 105, 107, 108, 110, 111, 113, 114, 116, 117, 119, 120, 122, 123, 125, 126, 104, 105, 107, 108, 110, 111, 113, 114, 116, 117, 119, 120, 122, 123, 125, 126, 104, 105, 107, 108, 110, 111, 113, 114, 116, 117, 119 },
};

byte noteCounter = 0;
byte totalNotes = 5;

unsigned long lastChangedNote = 0;
int changeNote = 125;

void setup() {
  analogReference(DEFAULT);
  pinMode(DAC0, ANALOG);
  // use 6.8k + 120R scaling resistor.
  // Actual resistance measured was 6.85k .
  // Due to 0.023V offset,
  // the DAC can't quite reach note 60 because that would need to reach 5.023V
  // Approx formula for note 59 = (59 * (1/12)) + 0.023 = 4.93966666667

  for(int i = 0; i < 6; i++){
    pinMode(analoguePins[i], INPUT);
  }

  for(int i = 0; i < 5; i++){
    pinMode(stepLedPins[i], OUTPUT);
  }

  for(int i = 0; i < 2; i++){
    pinMode(stepCountPins[i], INPUT_PULLUP);
  }

  pinMode(stepPin, INPUT);
  //pinMode(resetPin, INPUT);

  updateOutputs();
}

void loop() {

  if(!digitalRead(stepCountPins[0])){
    totalNotes = 3;
  }else if(!digitalRead(stepCountPins[1])){
    totalNotes = 5;
  }else{
    totalNotes = 4;
  }

  int analogueReading = analogRead(analoguePins[readAnaloguePin]);
  if(abs(analogueReading - analogueReadings[readAnaloguePin]) > jitterThreshold){
    analogueReadings[readAnaloguePin] = analogueReading;

    if(readAnaloguePin == 5){

      int scale63 = analogueReading >> 4;

      int rangeSelection = (scale63 >> 4) + 1;

      chosenScale = scale63 % 16;

      scaleRange = (float)rangeSelection / 4.0f;

      Serial.print(analogueReading);
      Serial.print("\t");
      Serial.print(chosenScale);
      Serial.print("\t");
      Serial.println(rangeSelection);

    }else{

      notes[readAnaloguePin] = analogueReading >> 4;
      if(notes[readAnaloguePin] > 59){
        notes[readAnaloguePin] = 59;
      }

    }
  }
  readAnaloguePin++;
  if(readAnaloguePin >= 6){
    readAnaloguePin = 0;
  }

  bool stepState = digitalRead(stepPin);
  if(stepState && !prevStepState){

    noteCounter++;
    if(noteCounter >= totalNotes){
      noteCounter = 0;
    }

    updateOutputs();

  }
  prevStepState = stepState;

  /*bool resetState = digitalRead(resetPin);
  if(resetState && !prevResetState){

    noteCounter = 0;

    updateOutputs();

  }
  prevResetState = resetState;*/

}

void updateOutputs(){

  int note = round(notes[noteCounter] * scaleRange);

  if(note < 0){
    note = 0;
  }else if(note > 59){
    note = 59;
  }

  byte scaleNote = pgm_read_byte(&(scaleNotes[chosenScale][note]));

  while (scaleNote > 59){

    note-=1;

    scaleNote = pgm_read_byte(&(scaleNotes[chosenScale][note]));

  }

  analogWrite(DAC0, scaleNote * 4);

  for(int i = 0; i < 5; i++){
    digitalWrite(stepLedPins[i], i == noteCounter);
  }

}
